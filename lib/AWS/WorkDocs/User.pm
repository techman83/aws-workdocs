package AWS::WorkDocs::User;

use v5.010;
use strict;
use warnings;
use Moo;
use Method::Signatures;
use Scalar::Util::Reftype;
use Carp qw(croak);

# ABSTRACT: A WorkDocs User Object

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

  use AWS::WorkDocs::User;
    
  my $workdocsuser = AWS::WorkDocs->new( email => "user@example.com" );
   
=head1 DESCRIPTION

=cut

my $Ref = sub {
  croak "auth isn't a 'AWS::WorkDocs::Auth' object!" unless reftype( $_[0] )->class eq "AWS::WorkDocs::Auth";
};

my $Pwd = sub {
  if ($_[0]) {
    croak "Password doesn't meet complexity requirements" unless $_[0] =~ /^.*(?=.{8,})(?=.*[a-z])(?=.*[A-Z])(?=.*[\d\W]).*$/;
  }
};

# Authentication Object
has 'auth'            => ( is => 'ro', required => 1, isa => $Ref );

# User
has 'EmailAddress'            => ( is => 'rw', default => sub { undef });
has 'Id'                      => ( is => 'rw', default => sub { undef } );
has 'Username'                => ( is => 'rw' );
has 'GivenName'               => ( is => 'rw' );
has 'Surname'                 => ( is => 'rw' );
has 'Status'                  => ( is => 'rw' );
has 'Administrator'           => ( is => 'rw' );
has 'OwnershipTransferInfo'   => ( is => 'rw' );
has 'Password'                => ( is => 'rw', isa => $Pwd);
has '_raw'                    => ( is => 'ro' );

sub BUILD {
  my $self = shift;

  if ($self->{_raw}) {
    my $user->{User} = $self->_raw;
    $self->_map_keys($user);
  }
  return;
}


method _build_user() {
  my $user;

  if ($self->{Id}) {
    $user = $self->auth->api_get("/user/$self->{Id}");
  } elsif ($self->{EmailAddress}) {
    my $users = $self->auth->api_get("/organization/user/search?filter=ALL&query=$self->{EmailAddress}");
    $user->{User} = @{$users->{Users}}[0];
  } else {
    croak("No unique identifier defined. email or id Accepted");
  }
 
  $self->_map_keys($user);
  
  return;
}

method _map_keys($data) {
  foreach my $key (keys %{ $data->{User} }) {
    $self->{$key} = $data->{User}{$key}; 
  }
}

=method retrieve

  $user->retrieve();

This will attempt to retrieve the User with the associated 
'EmailAddress' or 'Id'

=cut

method retrieve() {
  $self->_build_user();
  return;
}

=method create

  $user->create();

This will attempt to create a user. It requires that the following
attributes are set: EmailAddress, Password, GivenName, Surname

=cut

method create() {
  croak("EmailAddress is required for User creation") unless $self->{EmailAddress};
  croak("Password is required for User creation") unless $self->{Password};
  croak("GivenName is required for User creation") unless $self->{GivenName};
  croak("Surname is required for User creation") unless $self->{Surname};

  my $body = {
    Username => $self->EmailAddress,
    GivenName => $self->GivenName,
    Surname => $self->Surname,
    Password => $self->Password,
  };

  my $result = $self->auth->api_post("/user",$body);
  $self->_map_keys($result);
}

=method update

  $user->update();

Will update a user based on the current objects attributes.

=cut

method update() {
  croak("Id required for update, call retrieve method first") unless $self->{Id};
  my $body = {
    EmailAddress => $self->EmailAddress,
    GivenName => $self->GivenName,
    Surname => $self->Surname,
    Status => $self->Status,
  };

  my $result = $self->auth->api_put("/user/$self->{Id}",$body);
  $self->_map_keys($result);
}

=method update_attr

  $user->update_attr('GivenName', 'John');

Update a single user attribute. Any attribute on a user can be
updated this way, however there is no checking from the client
side. It will simply post whatever you've specified against the
user REST api.

=cut

method update_attr($attr,$data) {
  $self->retrieve unless $self->{Id};
  my $body->{$attr} = $data;
  my $result = $self->auth->api_put("/user/$self->{Id}",$body);
  $self->_map_keys($result);
}

=method activate
  
  $user->activate();

Activates a deactivated user.

=cut

method activate() {
  $self->retrieve unless $self->{Id};
  my $body->{Activate} = "true";
  my $result = $self->auth->api_put("/user/$self->{Id}",$body);
  $self->_map_keys($result);
}

=method deactivate
  
  $user->deactivate();

Deactivate an active user.

=cut

method deactivate() {
  $self->retrieve unless $self->{Id};
  my $body->{Deactivate} = "true";
  my $result = $self->auth->api_put("/user/$self->{Id}",$body);
  $self->_map_keys($result);
}

=method active

  $user->active()

This is a shortcut method to easily check if a user is active or
inactive. Returns 1 for active, 0 for inactive.

=cut

method active() {
  $self->retrieve;

  if ($self->{Status} eq 'ACTIVE') {
    return 1;
  } else {
    return 0;
  }
}

=method delete
  
  $user->delete();

Delete a user. Be aware this does just that. Be sure you are
deleting the user you are expecting to.

=cut

method delete() {
  $self->retrieve unless $self->{Id};
  my $result = $self->auth->api_delete("/user/$self->{Id}");
  return $result;
}

1;
